#!/bin/bash

# Configuration
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
DELAY=2  # Delay between requests in seconds
ERROR_LOG="batch_errors.txt"
DATA_DIR="pokemon_data"

# List of Pokémon to process
POKEMON_LIST=(
    "bulbasaur"
    "ivysaur"
    "venusaur"
    "charmander"
    "charmeleon"
)

# Create data directory if it doesn't exist
mkdir -p "$DATA_DIR"

# Initialize/clear error log
> "$ERROR_LOG"

# Function to convert name to lowercase
to_lowercase() {
    echo "$1" | tr '[:upper:]' '[:lower:]'
}

# Function to handle API requests with retry mechanism
fetch_pokemon_data() {
    local pokemon_name="$1"
    local output_file="$2"
    local max_retries=3
    local retry_count=0
    local wait_time=5

    while [ $retry_count -lt $max_retries ]; do
        if curl -f -s "${API_BASE_URL}/${pokemon_name}" -o "$output_file"; then
            # Verify the JSON file is valid
            if jq empty "$output_file" 2>/dev/null; then
                echo "Successfully retrieved data for ${pokemon_name}"
                return 0
            else
                echo "Invalid JSON received for ${pokemon_name}"
            fi
        fi

        retry_count=$((retry_count + 1))
        if [ $retry_count -lt $max_retries ]; then
            echo "Retry $retry_count/$max_retries for ${pokemon_name} after ${wait_time} seconds..."
            sleep $wait_time
            wait_time=$((wait_time * 2))  # Exponential backoff
        fi
    done

    # Log error if all retries failed
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Failed to retrieve data for ${pokemon_name} after ${max_retries} attempts" >> "$ERROR_LOG"
    return 1
}

# Main processing loop
echo "Starting batch processing of Pokémon data..."
echo "Data will be saved in: $DATA_DIR"

for pokemon in "${POKEMON_LIST[@]}"; do
    pokemon_lower=$(to_lowercase "$pokemon")
    output_file="${DATA_DIR}/${pokemon_lower}.json"
    
    echo "Processing ${pokemon}..."
    
    if fetch_pokemon_data "$pokemon_lower" "$output_file"; then
        # Check file size
        if [ ! -s "$output_file" ]; then
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Error: Empty file for ${pokemon}" >> "$ERROR_LOG"
            echo "Warning: Empty file received for ${pokemon}"
        fi
    else
        echo "Failed to process ${pokemon}"
    fi
    
    # Rate limiting delay
    if [ ! -z "${POKEMON_LIST[$((i+1))]}" ]; then
        echo "Waiting ${DELAY} seconds before next request..."
        sleep "$DELAY"
    fi
done

# Final status report
echo -e "\nBatch processing completed!"
if [ -s "$ERROR_LOG" ]; then
    echo "Some errors occurred. Check $ERROR_LOG for details."
else
    echo "All Pokémon data retrieved successfully!"
fi

# Display summary
echo -e "\nSummary of processed files:"
ls -l "$DATA_DIR"